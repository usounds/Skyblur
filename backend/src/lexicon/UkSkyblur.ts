/* eslint-disable */
// This file is automatically generated, do not edit!

type ObjectOmit<T, K extends keyof any> = Omit<T, K>;

/** Handles type branding in objects */
export declare namespace Brand {
  /** Symbol used to brand objects, this does not actually exist in runtime */
  const Type: unique symbol;

  /** Get the intended `$type` field */
  type GetType<T extends { [Type]?: string }> = NonNullable<T[typeof Type]>;

  /** Creates a union of objects where it's discriminated by `$type` field. */
  type Union<T extends { [Type]?: string }> = T extends any
    ? T & { $type: GetType<T> }
    : never;

  /** Omits the type branding from object */
  type Omit<T extends { [Type]?: string }> = ObjectOmit<T, typeof Type>;
}

/** Base AT Protocol schema types */
export declare namespace At {
  /** CID string */
  type CID = string;

  /** DID of a user */
  type DID = `did:${string}`;

  /** User handle */
  type Handle = string;

  /** URI string */
  type Uri = string;

  /** Object containing a CID string */
  interface CIDLink {
    $link: CID;
  }

  /** Object containing a base64-encoded bytes */
  interface Bytes {
    $bytes: string;
  }

  /** Blob interface */
  interface Blob<T extends string = string> {
    $type: "blob";
    mimeType: T;
    ref: {
      $link: string;
    };
    size: number;
  }
}
export declare namespace UkSkyblurPost {
  /** Record containing a Skyblur post. */
  interface Record {
    $type: "uk.skyblur.post";
    /** Created date assigned by client */
    createdAt: string;
    /**
     * The post main contents. Blurred text must be enclosed in brackets []. \
     * Maximum string length: 3000 \
     * Maximum grapheme length: 300
     */
    text: string;
    uri: At.Uri;
    /**
     * For 'password', the text only contains blurred text, and additional is always empty. The unblurred text and additional are included in the encryptBody. \
     * Maximum string length: 100 \
     * Maximum grapheme length: 10
     */
    visibility: "password" | "public" | (string & {});
    /**
     * The post additional contents. \
     * Maximum string length: 100000 \
     * Maximum grapheme length: 10000
     */
    additional?: string;
    /** Encrypted post body. It shoud be decrypted by the client with AES-256. */
    encryptBody?: At.Blob;
  }
}

/** Decrypting the post by blob cid. */
export declare namespace UkSkyblurPostDecryptByCid {
  interface Params {}
  interface Input {
    cid: At.CID;
    password: string;
    pds: string;
    repo: At.DID;
  }
  interface Output {
    text: string;
    additional?: string;
    message?: string;
  }
}

/** Encrypting the post. */
export declare namespace UkSkyblurPostEncrypt {
  interface Params {}
  interface Input {
    body: string;
    password: string;
  }
  interface Output {
    body: string;
    message?: string;
  }
}

/** Get Skyblur post. If the specified post is password-protected, you can retrieve the unlocked content by providing the password. */
export declare namespace UkSkyblurPostGetPost {
  interface Params {}
  interface Input {
    /** Skyblur post at-uri. It shoud be uk.skyblur.post collection. */
    uri: At.Uri;
    /** If the specified uri is password-protected, please provide the password. If no password is specified, the non-protected content will be returned. */
    password?: string;
  }
  interface Output {
    text: string;
    additional?: string;
    message?: string;
  }
}

export declare namespace UkSkyblurPreference {
  /** A declaration of a Skyblur account. */
  interface Record {
    $type: "uk.skyblur.preference";
    myPage: Brand.Union<UkSkyblurPreference.MyPage>;
  }
  interface MyPage {
    [Brand.Type]?: "uk.skyblur.preference#myPage";
    /** If this item is true, MyPage will be displayed. */
    isUseMyPage: boolean;
    /**
     * Define the description displayed on MyPage. \
     * Maximum string length: 10000 \
     * Maximum grapheme length: 100000
     */
    description?: string;
  }
}

export declare interface Records {
  "uk.skyblur.post": UkSkyblurPost.Record;
  "uk.skyblur.preference": UkSkyblurPreference.Record;
}

export declare interface Queries {}

export declare interface Procedures {
  "uk.skyblur.post.decryptByCid": {
    input: UkSkyblurPostDecryptByCid.Input;
    output: UkSkyblurPostDecryptByCid.Output;
  };
  "uk.skyblur.post.encrypt": {
    input: UkSkyblurPostEncrypt.Input;
    output: UkSkyblurPostEncrypt.Output;
  };
  "uk.skyblur.post.getPost": {
    input: UkSkyblurPostGetPost.Input;
    output: UkSkyblurPostGetPost.Output;
  };
}
